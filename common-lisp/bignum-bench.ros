#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:alexandria
                             :serapeum
                             :iterate
                             :cl-annot
                             :cl-debug-time) :silent t))
(defpackage :ros.script.bignum-bench.3789445726
  (:use :cl)
  (:import-from #:cl-annot
                #:enable-annot-syntax)
  (:import-from #:cl-debug-time
                #:with-measure-time)
  (:import-from #:iterate
                #:iter
                #:for
                #:from
                #:to
                #:in
                #:below
                #:collect))
(in-package :ros.script.bignum-bench.3789445726)

(enable-annot-syntax)

(defun main (&rest argv)
  (declare (ignorable argv)
           (optimize speed))
  (iter (for digit in '(1 2 3 4 5 10 20 30 40 50 100 200 300 400 500 1000 2000 3000 4000 5000))
    (format *trace-output* "digit ~A~%" digit)
    (let ((rs (with-measure-time ("random " :ms)
                (iter (for i below 1000000)
                  (collect (random (expt 10 digit))))))
          result)
      (with-measure-time ("loop nop " :ms)
        (loop for r in rs))
      (sb-ext:gc)
      (with-measure-time ("iter nop" :ms)
        (iter (for r in rs)))
      (sb-ext:gc)
      (with-measure-time ("1+ r" :ms)
        (iter (for r in rs)
          (1+ r)))
      (sb-ext:gc)
      (with-measure-time ("1- r" :ms)
        (iter (for r in rs)
          (1- r)))
      (sb-ext:gc)
      (with-measure-time ("+ r r" :ms)
        (iter (for r in rs)
          (+ r r)))
      (sb-ext:gc)
      (with-measure-time ("* 1 r" :ms)
        (iter (for r in rs)
          (* 1 r)))
      (sb-ext:gc)
      (with-measure-time ("* 2 r" :ms)
        (iter (for r in rs)
          (* 2 r)))
      (sb-ext:gc)
      (with-measure-time ("* r r" :ms)
        (iter (for r in rs)
          (* r r)))
      (sb-ext:gc)
      (with-measure-time ("ash r 1" :ms)
        (iter (for r in rs)
          (ash r 1)))
      (sb-ext:gc)
      (with-measure-time ("ash r -1" :ms)
        (iter (for r in rs)
          (ash r -1)))
      (sb-ext:gc)
      (with-measure-time ("/ r 1" :ms)
        (iter (for r in rs)
          (/ r 1)))
      (sb-ext:gc)
      (with-measure-time ("/ r 2" :ms)
        (iter (for r in rs)
          (/ r 2)))
      (sb-ext:gc))))
;;; vim: set ft=lisp lisp:
