#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:alexandria
                             :serapeum
                             :iterate
                             :cl-annot
                             :cl-debug-time) :silent t))
(defpackage :ros.script.bignum-bench.3789445726
  (:use :cl)
  (:import-from #:alexandria
                #:with-gensyms)
  (:import-from #:cl-annot
                #:enable-annot-syntax)
  (:import-from #:cl-debug-time
                #:with-measure-time)
  (:import-from #:iterate
                #:iter
                #:for
                #:from
                #:to
                #:in
                #:below
                #:collect))
(in-package :ros.script.bignum-bench.3789445726)

(enable-annot-syntax)

(defun bench (digit)
  (format *trace-output* "digit ~A~%" digit)
  (let ((rs (with-measure-time ("random " :ms)
              (iter (for i below 100000)
                (collect (random (expt 10 digit))))))
        result)
    (macrolet ((with-mt-gc (message &body body)
                 (with-gensyms (n)
                   `(progn
                      (with-measure-time (,message :ms)
                        (iter (for ,n below 1000)
                          (iter (for r in rs)
                            ,@body)))
                      (sb-ext:gc)))))
      (sb-ext:gc)
      (with-measure-time ("loop nop " :ms)
        (loop for r in rs))
      (sb-ext:gc)
      (with-mt-gc "iter nop")
      (with-mt-gc "1+ r" (setf result (1+ r)))
      (with-mt-gc "1- r" (setf result (1- r)))
      (with-mt-gc "+ r r" (setf result (+ r r)))
      (with-mt-gc "* 1 r" (setf result (* 1 r)))
      (with-mt-gc "* 2 r" (setf result (* 2 r)))
      (with-mt-gc "* r r" (setf result (* r r)))
      (with-mt-gc "ash r 1" (setf result (ash r 1)))
      (with-mt-gc "ash r -1" (setf result (ash r -1)))
      (with-mt-gc "/ r 1" (setf result (/ r 1)))
      (with-mt-gc "/ r 2" (setf result (/ r 2))))))

(defun main (&rest argv)
  (declare (ignorable argv)
           (optimize speed))
  (iter (for digit in '(1 2 3 4 5
                        10 20 30 40 50
                        100 200 300 400 500
                        1000 2000 3000 4000 5000))
    (bench digit)))
;;; vim: set ft=lisp lisp:
